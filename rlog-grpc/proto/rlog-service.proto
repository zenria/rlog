syntax = "proto3";

package rlog_service_protocol;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service LogCollector {
    // log a new log line!
    rpc Log(LogLine) returns (google.protobuf.Empty){}

    // report metrics from shipper
    rpc ReportMetrics(Metrics) returns (google.protobuf.Empty){}
}

message LogLine {
    // the hostname of the server producing the log. 
    string host=1;
    // when the log has been produced
    google.protobuf.Timestamp timestamp=2;

    oneof line {
        GelfLogLine gelf = 4;
        SyslogLogLine syslog = 5;
        //MinimalLogLine minimal = 7;
    }
}

// a log line from the GELF protocol
message GelfLogLine {
    string short_message = 2;

    optional string full_message = 3;

    // mapped from "level"
    SyslogSeverity severity = 4;

    // extra fields with _ removed, encoded in json
    string extra = 5;

}

// a log line from the syslog protocol
message SyslogLogLine {
    reserved 3,4,9;
    // facility
    SyslogFacility facility=1;
    // severity
    SyslogSeverity severity=2;
    
    // name of the application
    optional string appname=5;
    // pid 
    optional int32 proc_pid=6;
    // name of the process
    optional string proc_name=7;
    // message id
    optional string msgid=8;
    //pub structured_data: Vec<StructuredElement<S>>,
    
    // message
    string msg=10;
}

message MinimalLogLine {
    string message = 1;
    SyslogSeverity severity = 2;
    // extra fields, as a json object - can be an empty object `{}`
    string extra = 3;

}

enum SyslogFacility {
    kernel=0;
    user=1;
    mail=2;
    daemon=3;
    auth=4;
    syslog=5;
    lpr=6;
    news=7;
    uucp=8;
    cron=9;
    authpriv=10;
    ftp=11;
    ntp=12;
    audit=13;
    alert=14;
    clockd=15;
    local0=16;
    local1=17;
    local2=18;
    local3=19;
    local4=20;
    local5=21;
    local6=22;
    local7=23;
}
// Severity from RFC 5424
enum SyslogSeverity {
    EMERGENCY=0;
    ALERT=1;
    CRITICAL=2;
    ERROR=3;
    WARNING=4;
    NOTICE=5;
    INFO=6;
    DEBUG=7;
}

message Metrics {
    string hostname=1;
    map<string,uint64> queue_count=2;
    map<string,uint64> processed_count=3;   
    map<string,uint64> error_count=4;   

}
